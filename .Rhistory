# CODE BELOW:
textOutput("text_1"),
plotOutput("plot", height = 600, width = 1000),
textOutput("description")
)
)
)
shinyApp(ui, server)
dataset2 %>%
filter(location != 'World') %>%
mutate(date_num = as.numeric(as.Date(date)))
server <- function(input, output, session) {
output$plot <- renderPlot({
input_covidmonth = input$covid_month
dataset2 %>%
filter(location != 'World') %>%
mutate(date_num = as.numeric(as.Date(date))) %>%
filter(date_num == input_covidmonth) %>%
top_n(10,total_cases) %>%
mutate(location = fct_reorder(location, total_cases)) %>%
ggplot(aes(x = total_cases, y = location, fill = location))+
geom_col() +
geom_text(aes(label=total_cases), vjust=1.6, color="black", size=3.5)
})
output$text_1 <- renderText({
paste("Date:",as.Date(input$covid_month, origin = "1970-01-01"))
})
output$description <- renderText({
paste('https://ourworldindata.org/coronavirus-source-data')
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel('Data_ChangeOver'),
sidebarLayout(
sidebarPanel(
selectInput(inputId = 'choice',
label = "Select the Data",
choices = c("World Popultaion Trends","Covid-19 Trends", "Dataset3"),
selected = NULL,  multiple = FALSE,  selectize =TRUE,
width = '300px'),
conditionalPanel(
condition = "input.choice == 'World Popultaion Trends'",
sliderInput(inputId = "year",
label = "Select the year",
1950, 2100, 1,
value = 1950,
width = '300px',
animate = animationOptions(interval = .1,
playButton = icon('play', "fa-2x"),
pauseButton = icon('pause', "fa-2x"))),
),
conditionalPanel(
condition = "input.choice == 'Covid-19 Trends'",
sliderInput(inputId = "covid_month",
label = "Select the Month",
18262, 18647, 10,
value = 0,
width = '300px',
animate = animationOptions(interval = .1,
playButton = icon('play', "fa-2x"),
pauseButton = icon('pause', "fa-2x"))),
)
),
mainPanel(
# CODE BELOW:
textOutput("text_1"),
plotOutput("plot", height = 600, width = 1000),
textOutput("description")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
input_covidmonth = input$covid_month
dataset2 %>%
filter(location != 'World') %>%
filter(location != 'International') %>%
mutate(date_num = as.numeric(as.Date(date))) %>%
filter(date_num == input_covidmonth) %>%
top_n(10,total_cases) %>%
mutate(location = fct_reorder(location, total_cases)) %>%
ggplot(aes(x = total_cases, y = location, fill = location))+
geom_col() +
geom_text(aes(label=total_cases), vjust=1.6, color="black", size=3.5)
})
output$text_1 <- renderText({
paste("Date:",as.Date(input$covid_month, origin = "1970-01-01"))
})
output$description <- renderText({
paste('https://ourworldindata.org/coronavirus-source-data')
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel('Data_ChangeOver'),
sidebarLayout(
sidebarPanel(
selectInput(inputId = 'choice',
label = "Select the Data",
choices = c("World Popultaion Trends","Covid-19 Trends", "Dataset3"),
selected = NULL,  multiple = FALSE,  selectize =TRUE,
width = '300px'),
conditionalPanel(
condition = "input.choice == 'World Popultaion Trends'",
sliderInput(inputId = "year",
label = "Select the year",
1950, 2100, 1,
value = 1950,
width = '300px',
animate = animationOptions(interval = .1,
playButton = icon('play', "fa-2x"),
pauseButton = icon('pause', "fa-2x"))),
),
conditionalPanel(
condition = "input.choice == 'Covid-19 Trends'",
sliderInput(inputId = "covid_month",
label = "Select the Month",
18262, 18647, 5,
value = 0,
width = '300px',
animate = animationOptions(interval = .1,
playButton = icon('play', "fa-2x"),
pauseButton = icon('pause', "fa-2x"))),
)
),
mainPanel(
# CODE BELOW:
textOutput("text_1"),
plotOutput("plot", height = 600, width = 1000),
textOutput("description")
)
)
)
shinyApp(ui, server)
ui <- fluidPage(
titlePanel('Data_ChangeOver'),
sidebarLayout(
sidebarPanel(
selectInput(inputId = 'choice',
label = "Select the Data",
choices = c("World Popultaion Trends","Covid-19 Trends", "Dataset3"),
selected = NULL,  multiple = FALSE,  selectize =TRUE,
width = '300px'),
conditionalPanel(
condition = "input.choice == 'World Popultaion Trends'",
sliderInput(inputId = "year",
label = "Select the year",
1950, 2100, 1,
value = 1950,
width = '300px',
animate = animationOptions(interval = .1,
playButton = icon('play', "fa-2x"),
pauseButton = icon('pause', "fa-2x"))),
),
conditionalPanel(
condition = "input.choice == 'Covid-19 Trends'",
sliderInput(inputId = "covid_month",
label = "Select the Month",
18262, 18647, 4,
value = 0,
width = '300px',
animate = animationOptions(interval = .1,
playButton = icon('play', "fa-2x"),
pauseButton = icon('pause', "fa-2x"))),
)
),
mainPanel(
# CODE BELOW:
textOutput("text_1"),
plotOutput("plot", height = 600, width = 1000),
textOutput("description")
)
)
)
if(input$choice == 'World Popultaion Trends'){
server <- function(input, output, session) {
ch = reactive(input$choice)
output$plot <- renderPlot({
input_year = input$year
dataset1 %>%
filter(Variant == "Medium") %>%
filter(Time == input_year) %>%
top_n(10,PopTotal) %>%
mutate(Location = fct_reorder(Location, PopTotal))%>%
ggplot(aes(x = PopTotal, y = Location, fill = Location))+
geom_col() +
geom_text(aes(label=PopTotal), vjust=1.6, color="black", size=3.5)
})
output$text_1 <- renderText({
paste("Year:",input$year)
})
output$description <- renderText({
paste('DataSource')
})
}
}
server <- function(input, output, session) {
output$plot <- renderPlot({
input_covidmonth = input$covid_month
dataset2 %>%
filter(location != 'World') %>%
filter(location != 'International') %>%
mutate(date_num = as.numeric(as.Date(date))) %>%
filter(date_num == input_covidmonth) %>%
top_n(10,total_cases) %>%
mutate(location = fct_reorder(location, total_cases)) %>%
ggplot(aes(x = total_cases, y = location, fill = location))+
geom_col() +
geom_text(aes(label=total_cases), vjust=1.6, color="black", size=3.5)
})
output$text_1 <- renderText({
paste("Date:",as.Date(input$covid_month, origin = "1970-01-01"))
})
output$description <- renderText({
paste('https://ourworldindata.org/coronavirus-source-data')
})
}
server <- function(input, output, session) {
if(input$choice == 'World Popultaion Trends'){
ch = reactive(input$choice)
output$plot <- renderPlot({
input_year = input$year
dataset1 %>%
filter(Variant == "Medium") %>%
filter(Time == input_year) %>%
top_n(10,PopTotal) %>%
mutate(Location = fct_reorder(Location, PopTotal))%>%
ggplot(aes(x = PopTotal, y = Location, fill = Location))+
geom_col() +
geom_text(aes(label=PopTotal), vjust=1.6, color="black", size=3.5)
})
output$text_1 <- renderText({
paste("Year:",input$year)
})
output$description <- renderText({
paste('DataSource')
})
}
}
server <- function(input, output, session) {
if(input$choice == 'World Popultaion Trends'){
ch = reactive(input$choice)
output$plot <- renderPlot({
input_year = input$year
dataset1 %>%
filter(Variant == "Medium") %>%
filter(Time == input_year) %>%
top_n(10,PopTotal) %>%
mutate(Location = fct_reorder(Location, PopTotal))%>%
ggplot(aes(x = PopTotal, y = Location, fill = Location))+
geom_col() +
geom_text(aes(label=PopTotal), vjust=1.6, color="black", size=3.5)
})
output$text_1 <- renderText({
paste("Year:",input$year)
})
output$description <- renderText({
paste('DataSource')
})
}
else if (input$choice == 'Covid-19 Trends'){
output$plot <- renderPlot({
input_covidmonth = input$covid_month
dataset2 %>%
filter(location != 'World') %>%
filter(location != 'International') %>%
mutate(date_num = as.numeric(as.Date(date))) %>%
filter(date_num == input_covidmonth) %>%
top_n(10,total_cases) %>%
mutate(location = fct_reorder(location, total_cases)) %>%
ggplot(aes(x = total_cases, y = location, fill = location))+
geom_col() +
geom_text(aes(label=total_cases), vjust=1.6, color="black", size=3.5)
})
output$text_1 <- renderText({
paste("Date:",as.Date(input$covid_month, origin = "1970-01-01"))
})
output$description <- renderText({
paste('https://ourworldindata.org/coronavirus-source-data')
})
}
}
shinyApp(ui, server)
server <- function(input, output, session) {
ch = reactive(input$choice)
if(ch == 'World Popultaion Trends'){
output$plot <- renderPlot({
input_year = input$year
dataset1 %>%
filter(Variant == "Medium") %>%
filter(Time == input_year) %>%
top_n(10,PopTotal) %>%
mutate(Location = fct_reorder(Location, PopTotal))%>%
ggplot(aes(x = PopTotal, y = Location, fill = Location))+
geom_col() +
geom_text(aes(label=PopTotal), vjust=1.6, color="black", size=3.5)
})
output$text_1 <- renderText({
paste("Year:",input$year)
})
output$description <- renderText({
paste('DataSource')
})
}
else if (ch == 'Covid-19 Trends'){
output$plot <- renderPlot({
input_covidmonth = input$covid_month
dataset2 %>%
filter(location != 'World') %>%
filter(location != 'International') %>%
mutate(date_num = as.numeric(as.Date(date))) %>%
filter(date_num == input_covidmonth) %>%
top_n(10,total_cases) %>%
mutate(location = fct_reorder(location, total_cases)) %>%
ggplot(aes(x = total_cases, y = location, fill = location))+
geom_col() +
geom_text(aes(label=total_cases), vjust=1.6, color="black", size=3.5)
})
output$text_1 <- renderText({
paste("Date:",as.Date(input$covid_month, origin = "1970-01-01"))
})
output$description <- renderText({
paste('https://ourworldindata.org/coronavirus-source-data')
})
}
}
shinyApp(ui, server)
server <- function(input, output, session) {
ch = reactive(input$choice)
if(as.character(ch) == 'World Popultaion Trends'){
output$plot <- renderPlot({
input_year = input$year
dataset1 %>%
filter(Variant == "Medium") %>%
filter(Time == input_year) %>%
top_n(10,PopTotal) %>%
mutate(Location = fct_reorder(Location, PopTotal))%>%
ggplot(aes(x = PopTotal, y = Location, fill = Location))+
geom_col() +
geom_text(aes(label=PopTotal), vjust=1.6, color="black", size=3.5)
})
output$text_1 <- renderText({
paste("Year:",input$year)
})
output$description <- renderText({
paste('DataSource')
})
}
else if (as.character(ch) == 'Covid-19 Trends'){
output$plot <- renderPlot({
input_covidmonth = input$covid_month
dataset2 %>%
filter(location != 'World') %>%
filter(location != 'International') %>%
mutate(date_num = as.numeric(as.Date(date))) %>%
filter(date_num == input_covidmonth) %>%
top_n(10,total_cases) %>%
mutate(location = fct_reorder(location, total_cases)) %>%
ggplot(aes(x = total_cases, y = location, fill = location))+
geom_col() +
geom_text(aes(label=total_cases), vjust=1.6, color="black", size=3.5)
})
output$text_1 <- renderText({
paste("Date:",as.Date(input$covid_month, origin = "1970-01-01"))
})
output$description <- renderText({
paste('https://ourworldindata.org/coronavirus-source-data')
})
}
}
shinyApp(ui, server)
case1data <- readxl::read_xlsx('Case1Data.xlsm; )
case1data <- readxl::read_xlsx('Case1Data.xlsm' )
case1data <- readxl::read_xlsx('Case1Data.xlsm' )
case1data <- read.csv('Case1Data.xlsm')
library(readxl)
Case1Data <- read_excel("~/Case1Data.xlsm")
View(Case1Data)
Case1Data
## Rows only with CPT == 19364
library(dplyr)
Case1Data %>% filter(Plastic == 1 & After2014 == 0 )
sample1 = Case1Data %>% filter(Plastic == 1 & After2014 == 0)$URR
sample1 = Case1Data %>% filter(Plastic == 1 & After2014 == 0)
sample1 = Case1Data %>% filter(Plastic == 1 & After2014 == 1)
sample1 = Case1Data %>% filter(Plastic == 1 & After2014 == 0)
sample2 = Case1Data %>% filter(Plastic == 1 & After2014 == 1)
sample1$URR
mean(sample1$URR)
mean(sample2$URR)
mean(sample1$URR)
mean(sample2$URR)
barplot(c(
mean(sample1$URR), mean(sample2$URR))
))
barplot(c(mean(sample1$URR), mean(sample2$URR)))
barplot(c(mean(sample1$URR), mean(sample2$URR)), names.arg = c('Before2014', 'After2014'))
t.test(sample1$URR,sample2$URR)
attach(Case1Data)
detach(Case1Data)
glm(URR~. - OPTIME-Plastic-SSI-CPT-DIAB+Factor(CPT)+factor(DIAB) , family = 'binomial', data = case1Data[Case1Data$Plastic == 1, ])
glm(URR~. - OPTIME-Plastic-SSI-CPT-DIAB+Factor(CPT)+factor(DIAB) , family = 'binomial', data = Case1Data[Case1Data$Plastic ==1 ])
glm(URR~. - OPTIME-Plastic-SSI-CPT-DIAB+Factor(CPT)+factor(DIAB) , family = 'binomial', data = Case1Data[Case1Data$Plastic ==1 ,])
glm(URR~. - OPTIME-Plastic-SSI-CPT-DIAB+factor(CPT)+factor(DIAB) , family = 'binomial', data = Case1Data[Case1Data$Plastic ==1 ,])
model_reg = glm(URR~. - OPTIME-Plastic-SSI-CPT-DIAB+factor(CPT)+factor(DIAB),
family = 'binomial', data = Case1Data[Case1Data$Plastic ==1 ,])
summary(model_reg)
install.packages('mlogit', dependencies = TRUE)
install.packages('caret')
install.packages('lattice')
install.packages('ggplot2')
install.packages('e1071')
install.packages('gmnl' )
install.packages("ggplot2")
library(mlogit)
data("Cracker", package = 'mlogit')
View(head(Cracker))
cracker_data <- data("Cracker", package = 'mlogit')
cracker_data
cracker_data
Cracker
CrLong <- mlogit.data(Cracker, choice = "choice", shape = "long", varying = 2:13)
CrLong
choice_model<- mlogit(choice~disp+feat+price, CrLong, reflevel = 'private')
summary(choice_model)
coef(choice_model)
-coef(choice_model[price])
-coef(choice_model['price'])
-coef(choice_model)
-coef(choice_model[5])/coef(choice_model[6])
-coef(choice_model)[5]/coef(choice_model)[6]
mrs = -coef(choice_model)[5]/coef(choice_model)[6]
mrs
effects(choice_model, covariate = 'price', type = 'rr')
mrs = -coef(choice_model)[5]/coef(choice_model)[6]
mrs
#Price Elasticies
effects(choice_model, covariate = 'price', type = 'rr')
choice_model2 <- mlogit(choice~feat|1|price,disp, CrLong, reflevel = 'private')
choice_model2 <- mlogit(choice~feat|1|price+disp, CrLong, reflevel = 'private')
summary(choice_model2)
choice_model2 <- mlogit(choice~feat|1|price, CrLong, reflevel = 'private')
choice_model2 <- mlogit(choice~feat|1|price, CrLong, reflevel = 'private')
summary(choice_model2)
lrtest(choice_model,choice_model2)
choice_model2 <- mlogit(choice~0|1|price+feat, CrLong, reflevel = 'private')
choice_model3 <- mlogit(choice~0|1|price+feat, CrLong, reflevel = 'private')
choice_model3 <- mlogit(choice~0|1|price+feat, CrLong, reflevel = 'private')
summary(choice_model3)
choice_model2 <- mlogit(choice~feat|1|price, CrLong, reflevel = 'private')
summary(choice_model2)
apply(fitted(model,type = 'probabilities'), 2, mean)
model <- choice_model2
apply(fitted(model,type = 'probabilities'), 2, mean)
prop.table(table(factor(Cracker.train$choice, levels = c('private','keebler','nabisco','sunshine'))))
prop.table(table(factor(cracker.train$choice, levels = c('private','keebler','nabisco','sunshine'))))
prop.table(table(factor(Cracker.train$choice, levels = c('private','keebler','nabisco','sunshine'))))
prop.table(table(factor(Cracker$choice, levels = c('private','keebler','nabisco','sunshine'))))
model <- choice_model2
#fitted
apply(fitted(model,type = 'probabilities'), 2, mean)
#actual
prop.table(table(factor(Cracker$choice, levels = c('private','keebler','nabisco','sunshine'))))
Cracker.train
#Question1
#load_data:Case1
view(Case1Data)
Case1Data$DID = Case1Data$Plastic * Case1Data$After2014
summary(glm(SSI~.-OPTIME-URR-CPT-DIAB+factor(CPT)+factor(DIAB), data = Case1Data, family = 'binomial'))
#Question2
#load_data:Case2Data
library(readxl)
Case2Data <- read_excel("~/Case2Data.xlsm")
View(Case2Data)
newdata <- na.omit(Case2Data)
newdata
view(newdata)
sum(is.na(Case2Data$apache2))
sum((Case2Data$apache2))
sum(Case2Data$apache2)
dim(Case2Data)
#Question1
#load_data:Case1Data
library(readxl)
Case2Data <- read_excel("~/Case1Data.xlsm")
view(Case1Data)
hist(Case2Data$apach2)
hist(Case2Data$apache2)
Case2Data$apache2
#Question2
#load_data:Case2Data
library(readxl)
Case2Data <- read_excel("~/Case2Data.xlsm")
sum(is.na(Case2Data$apache2)) #771 Rows with NA value
dim(Case2Data) #6339 Rows
hist(Case2Data$apache2)
hist(Case2Data$apache2)
hist(Case2Data$apache2, main = 'Apache2_Distribution')
771/6339
sum(is.na(Case2Data$icuAdatetime)) #771 Rows with NA value
sum(is.na(Case2Data$icuDdatetime)) #771 Rows with NA value
sum(is.na(Case2Data$apache2)) #771 Rows with NA value
cor(newdata, method = "pearson", use = "complete.obs")
table(newdata)
newdata
col(newdata)
colnames(newdata)
cor(newdata[c(3,7,8,9,10,11,12,13,14)], method = "pearson", use = "complete.obs")
colnames(newdata)
cor(newdata[c(2,3,9,10,11,12,13,14)], method = "pearson", use = "complete.obs")
hist(Case2Data$iculos, main = 'ICU Length of Stay')
